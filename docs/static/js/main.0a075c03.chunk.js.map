{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","ev","preventDefault","trim","length","c","type","value","onChange","e","target","GifGridItem","title","url","className","src","alt","getGifs","cat","a","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","console","log","GifGrid","category","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAc9C,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAGC,iBACCJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAAAS,GAAC,OAAMP,GAAN,mBAAqBO,OACpCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAhBoB,SAACC,GAAD,OAAOV,EAAcU,EAAEC,OAAOH,a,QCN7CI,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAClC,OACE,sBAAKC,UAAU,6CAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCYIK,EAfF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRN,EADQ,0DACkDK,EADlD,sDAEKE,MAAMP,GAFX,cAERQ,EAFQ,gBAGOA,EAAKC,OAHZ,uBAGPC,EAHO,EAGPA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MACvB,CACEC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAKa,EAAIE,OAAOC,iBAAiBhB,QAGrCiB,QAAQC,IAAIP,GAXE,kBAYPA,GAZO,4CAAH,sDCKAQ,EAAU,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EAEhBpC,mBAAS,CACjC0B,KAAM,GACNW,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAgB1C,OATAC,qBAAU,WACRpB,EAASgB,GACNK,MAAK,SAAAd,GAAI,OAAIY,EAAS,CACrBb,KAAMC,EACNU,SAAS,SAGZ,CAACD,IAEGE,EDJmBI,CAAaN,GAA/BV,EAT6B,EAS7BA,KAAMW,EATuB,EASvBA,QAEd,OACE,qCACE,6BAAKD,IACJC,EAAU,mBAAGpB,UAAU,mCAAb,wBAAiE,KAC5E,qBAAKA,UAAU,YAAf,SAEES,EAAKE,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEOA,GADAA,EAAIC,aErBRa,EAAe,WAAO,IAAD,EAEI3C,mBAAS,CAAC,cAFd,mBAEzB4C,EAFyB,KAEb7C,EAFa,KAKhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWhB,KAAK,SAAAQ,GAAQ,OACvB,cAAC,EAAD,CACEA,SAAWA,GACLA,YCdlBS,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0a075c03.chunk.js","sourcesContent":["import { useState } from \"react\"\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => { //addToList pasado desde GifExpertApp\n\n  const [inputValue, setInputValue] = useState('')\n  const handleInputChange = (e) => setInputValue(e.target.value)\n\n  const handleSubmit = ev => {\n    ev.preventDefault() // prevenimos refresh de la pagina\n    if (inputValue.trim().length > 2) {\n\n      setCategories(c => [ inputValue, ...c]) // agregamos a la lista el inputvalue\n      setInputValue(''); // seteamos el inputvalue a vacio\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >\n      <input \n        type=\"text\" \n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export const GifGridItem = ({title, url}) => {\n  return (\n    <div className=\"card animate__animated animate__fadeInDown\">\n      <img src={ url } alt={ title } />\n      <p>{ title }</p>\n    </div>\n  )\n}\n","// retorna un arr donde cada elemento es un objeto con id, titulo y url de imagen\nconst getGifs = async (cat) => {\n  const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ cat }&api_key=HMYKInVIRoLUOJNyTsBpq5CjPOjWYnh2`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  const gifs = data.map(img => (\n    {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    })\n  );\n  console.log(gifs)\n  return gifs;\n}\n\nexport default getGifs;","// import { useEffect, useState } from \"react\";\nimport { GifGridItem } from \"./GifGridItem.jsx\";\n// import getGifs from \"../helpers/getGifs\"\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({category}) => {\n\n  // const [images, setImages] = useState([])\n  \n  // useEffect(() => {\n    //   getGifs(category)\n    //     .then(gifs => setImages(gifs)); //retorna lista de gifs y es pasada a setImages\n    //   },[ category ])\n    \n  const { data, loading } = useFetchGifs(category); // <-- customHook\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading ? <p className=\"animate__animated animate__flash\">Loading...</p> : null}\n      <div className=\"card-grid\">\n      {\n        data.map( img => (\n          <GifGridItem \n            key={img.id}\n            { ...img }\n          />\n        ))\n      }\n      </div>\n    </>\n  );\n\n}\n","import { useEffect, useState } from \"react\"\nimport getGifs from \"../helpers/getGifs\"\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  }) \n\n  useEffect(() => {\n    getGifs( category )\n      .then(gifs => setState({\n        data: gifs, \n        loading: false \n        })\n      )\n  }, [category])\n  \n  return state;\n}\n","import { useState } from \"react\";\nimport {AddCategory} from './components/AddCategory.jsx'\nimport { GifGrid } from \"./components/GifGrid.jsx\";\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch']);\n  // const handleAdd = newCat => setCategories(c => [...c,newCat])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>   \n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map( category => (\n          <GifGrid \n            category={ category } \n            key={ category }\n          />\n          ) \n        )}\n      </ol>\n    </>\n  )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp as App} from './GifExpertApp.jsx'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}